import com.github.sarxos.webcam.Webcam;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.TargetDataLine;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SwingConstants;

/**
 *
 * @author PMYLS
 */
public class Server {

    public static final int AUDIO_SENDER_PORT = 5000;
    public static final int AUDIO_RECEIVER_PORT = 5001;
    public static final int VEDIO_SENDER_PORT = 7900;
    public static final int VEDIO_RECEIVER_PORT = 7800;
    protected static JTextArea MsgArea;
    protected static JLabel server_video_frame;
    protected static JLabel client_video_frame;

    private static AudioSender t_audio_sender;
    
    private static AudioReceiver t_audio_reciver;
    private static VideoHandler t_video_handler;
    
    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     * @throws java.lang.ClassNotFoundException
     */
    public static void main(String args[]) throws Exception{
   
        createForm();
        
    }
    
    
public static void createForm()
{
       
        JFrame jf=new JFrame();
        
        // Set up the main window
        jf.setTitle("CN Project of Voice and Video Chat - Server Side");
        jf.setSize(600, 600);
        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        jf.setLayout(new BorderLayout());

        JPanel videoChatPanel = createVideoChatPanel();

        jf.add(videoChatPanel);
        jf.setVisible(true);
    
 }

    
    private static JPanel createVideoChatPanel() {
        JPanel panel = new JPanel(new BorderLayout());

        
        JPanel controlPanel = new JPanel(new FlowLayout());
        server_video_frame = new JLabel();
        server_video_frame.setSize(362, 275);
        server_video_frame.setHorizontalAlignment(SwingConstants.CENTER);
        server_video_frame.setForeground(new java.awt.Color(236,236,236));
        server_video_frame.setText("Server Video Area");
        
        client_video_frame = new JLabel();
        client_video_frame.setHorizontalAlignment(SwingConstants.CENTER);
        client_video_frame.setSize(362, 275);
        client_video_frame.setForeground(new java.awt.Color(236,236,236)); 
        client_video_frame.setText("Client Video Area");
        
        controlPanel.add(server_video_frame);
        controlPanel.add(client_video_frame);
        panel.add(controlPanel, BorderLayout.NORTH);

        
        JPanel controlPanel2 = new JPanel(new FlowLayout());
        JButton startVoiceCallButton = new JButton("Start Server for Voice Call");
        JButton startVideoCallButton = new JButton("Start Server for Video Call");
        
        
        controlPanel2.add(startVoiceCallButton);
        controlPanel2.add(startVideoCallButton);
        panel.add(controlPanel2, BorderLayout.CENTER);

        MsgArea = new JTextArea();
        MsgArea.setEditable(false);
        MsgArea.setLineWrap(true);
        MsgArea.setWrapStyleWord(true);
        MsgArea.setRows(4);
        JScrollPane videoChatScrollPane = new JScrollPane(MsgArea);
        panel.add(videoChatScrollPane, BorderLayout.SOUTH);

      
        startVoiceCallButton.addActionListener((ActionEvent e) -> {
            CNProjectChatServer.MsgArea.append("Starting voice call...\n");
            controlPanel2.remove(startVoiceCallButton);
            controlPanel2.remove(startVideoCallButton);
            panel.repaint(1);
            t_audio_sender=new AudioSender();
            t_audio_reciver=new AudioReceiver();
            
            
            t_audio_reciver.start();
            CNProjectChatServer.MsgArea.append("Audio Reciever Thread started\n");
            
            t_audio_sender.start();
            CNProjectChatServer.MsgArea.append("Audio Sender Thread started\n");
        });


        startVideoCallButton.addActionListener((ActionEvent e) -> {
            CNProjectChatServer.MsgArea.append("Starting video call...\n");
            controlPanel2.remove(startVideoCallButton);
            controlPanel2.remove(startVoiceCallButton);
            panel.repaint(1);
            t_video_handler=new VideoHandler();
            t_audio_reciver=new AudioReceiver();
            t_audio_sender=new AudioSender();
           
            t_video_handler.start();
            CNProjectChatServer.MsgArea.append("Video Handler Thread started\n");
            t_audio_reciver.start();
            CNProjectChatServer.MsgArea.append("Audio Reciever Thread started\n");
            t_audio_sender.start();
            CNProjectChatServer.MsgArea.append("Audio Sender Thread started\n");
        
        });

        
        return panel;
    }

}

 class AudioSender extends Thread{
         
        private boolean exit;
        private ServerSocket serverSocket;
        private    Socket socket;
        private DataOutputStream outputStream;
        private AudioFormat format;
        private DataLine.Info info;
        private  TargetDataLine microphone;
        @SuppressWarnings("empty-statement")
    AudioSender() 
    {
        exit = false;
         
        
    }    
        @Override
        public void run() {
         
        try{
        if(serverSocket==null)
        serverSocket = new ServerSocket(CNProjectChatServer.AUDIO_SENDER_PORT);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(AudioSender.class.getName()).log(Level.SEVERE, null, ex);
            }
        }catch(IOException e){CNProjectChatServer.MsgArea.append("Issue in AudioSenderServerSocket\n");}
                try {
                Thread.sleep(2000);
            } catch (InterruptedException ex) {
                ex.getMessage();
            }
        
        try{
        CNProjectChatServer.MsgArea.append("Audio Sender Server Socket started and waiting for client\n");
        socket = serverSocket.accept();
        CNProjectChatServer.MsgArea.append("Audio Sender Server Socket got client\n");
        }catch(IOException e){CNProjectChatServer.MsgArea.append("Issue in establisting AudioSenderSocket with client.\n");}

        try{
        outputStream = new DataOutputStream(socket.getOutputStream());
        }catch(IOException e){CNProjectChatServer.MsgArea.append("Issue in establisting AudioSender DataOutputStream.\n");}
        
         format   = new AudioFormat(8000, 16, 2, true, true);
         info  = new DataLine.Info(TargetDataLine.class, format);
         try{microphone = (TargetDataLine) AudioSystem.getLine(info);
         microphone.open(format);
         }catch(LineUnavailableException e){CNProjectChatServer.MsgArea.append("Issue in establisting microfone in AudioSender\n");}
    
        
            try {
               
                
                microphone.start();

                byte[] buffer = new byte[1024];
                int bytesRead;
                while (!exit&&((bytesRead = microphone.read(buffer, 0, buffer.length)) != -1)) {
                    outputStream.write(buffer, 0, bytesRead);
                }
               
                microphone.close();
                socket.close();
             

                
            } catch (IOException e) {
                CNProjectChatServer.MsgArea.append("Issue in running Thread of AudioSender. May be client is closed.\n");
            }
            
                
        }
        public void end() {
        
         exit = true;
         microphone.close();
         try{
         
             socket.close();
         }
          catch (IOException e) {
                CNProjectChatServer.MsgArea.append("Issue in closing AudioSender Socket\n");
            }
          
                 
        }
   
    }

   class AudioReceiver  extends Thread{
         
        private boolean exit;
        private ServerSocket serverSocket;
        private Socket socket;
        private DataInputStream inputStream;
        private AudioFormat format;
        private DataLine.Info info;
        private  SourceDataLine speakers;
        
 
    AudioReceiver()
    {
        exit = false;
        
    }
        
        @Override
        public void run()    
        {   
        try{
        if(serverSocket==null)    
        serverSocket = new ServerSocket(CNProjectChatServer.AUDIO_RECEIVER_PORT);
        }catch(IOException e){CNProjectChatServer.MsgArea.append("Issue in AudioReciverServerSocket\n");} 
        
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                ex.getMessage();
            }
        
        try{
            CNProjectChatServer.MsgArea.append("Audio Receiver Server Socket started and waiting for client\n");
        socket = serverSocket.accept();
        CNProjectChatServer.MsgArea.append("Audio Receiver Server Socket got client\n");
        }catch(IOException e){CNProjectChatServer.MsgArea.append("Issue in establisting AudioSenderSocket with client.\n");}
        try{
        inputStream = new DataInputStream(socket.getInputStream());
        }catch(IOException e){CNProjectChatServer.MsgArea.append("Issue in establisting AudioSender DataOutputStream.\n");}
         format = new AudioFormat(8000, 16, 2, true, true);
                info = new DataLine.Info(SourceDataLine.class, format);
            try{
                
                speakers = (SourceDataLine) AudioSystem.getLine(info);
                speakers.open(format);
        }catch(LineUnavailableException e){CNProjectChatServer.MsgArea.append("Issue in establisting microfone in Audio  Reciver\n");}

 
         try { 
 
                
                speakers.start();

                byte[] buffer = new byte[1024];
                int bytesRead;
                while (!exit&&((bytesRead = inputStream.read(buffer)) != -1)) {
                    speakers.write(buffer, 0, bytesRead);
                }
                speakers.stop();
                socket.close();
                serverSocket.close();
               } catch (IOException e) {
                CNProjectChatServer.MsgArea.append("Issue in running Thread of AudioSender\n");
            }
   
        }
    
            public void end() {
                        exit = true;   
        }
   
   
    
    }

   class VideoHandler extends Thread{
         
        private boolean exit;
        private ServerSocket in_server,out_server;
        private Socket s_in,s_out;
        
        private ObjectInputStream in;
        private ObjectOutputStream out;
        private Webcam cam;
        private ImageIcon ic;
        private BufferedImage br;
        
 
    VideoHandler()
    {
        exit = false;
        
    }
        
        @Override
        public void run() {
        
         try{
             in_server=new ServerSocket(CNProjectChatServer.VEDIO_RECEIVER_PORT);
             CNProjectChatServer.MsgArea.append("Video Input Socket created. Waiting for Client.\n"); 
            
             out_server=new ServerSocket(CNProjectChatServer.VEDIO_SENDER_PORT);
             CNProjectChatServer.MsgArea.append("Video Output Socket created.Waiting for Client. \n");
              
                s_in= in_server.accept();
                s_out= out_server.accept();
         
         }catch(IOException e){CNProjectChatServer.MsgArea.append("Issue in establisting Video Sockets with client.\n");}
         
         try{
                 CNProjectChatServer.MsgArea.append("Preparing Video Streams\n");
                 
                 
                 in=new ObjectInputStream(s_in.getInputStream());
                 CNProjectChatServer.MsgArea.append("Video Input Stream is ready\n");
                 
                 out=new ObjectOutputStream(s_out.getOutputStream());
                 CNProjectChatServer.MsgArea.append("Video Output Stream is ready\n");       
                 
                 cam =Webcam.getDefault();
                 cam.open();
                 CNProjectChatServer.MsgArea.append("CAM ON\n");
                 
        
           while(!exit){
            br=cam.getImage();
            ic=new ImageIcon(br);
            CNProjectChatServer.server_video_frame.setIcon(ic);
            CNProjectChatServer.client_video_frame.setIcon((ImageIcon)in.readObject());
            out.writeObject(ic);
            out.flush();
             
            }
           
                cam.close();
                s_in.close();
                s_out.close();
                in_server.close();
                out_server.close();
        
           }catch(IOException | ClassNotFoundException e){e.getMessage();
           
            }
        }
        public void end() {
             exit=true;
            
        }
    }

